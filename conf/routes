# Redirect to application

# These routes won't support an URL that maps to an internal AngularJS state (those would all be routed to /public/app")
GET    /                           @controllers.ApplicationController.loadPublicApp
GET    /index.html                 @controllers.ApplicationController.redirectToPublicApp
GET    /consent/:sessionToken      @controllers.ApplicationController.loadConsent(sessionToken: String)

# API - Authentication
POST   /api/v1/auth/signIn                  @controllers.AuthenticationController.signIn
GET    /api/v1/auth/signOut                 @controllers.AuthenticationController.signOut
POST   /api/v1/auth/requestResetPassword    @controllers.AuthenticationController.requestResetPassword
POST   /api/v1/auth/resetPassword           @controllers.AuthenticationController.resetPassword
POST   /api/v1/auth/signUp                  @controllers.AuthenticationController.signUp
POST   /api/v1/auth/verifyEmail             @controllers.AuthenticationController.verifyEmail
POST   /api/v1/auth/resendEmailVerification @controllers.AuthenticationController.resendEmailVerification

# API - Individual Health Data Record
GET    /api/v1/healthdata/:identifier/record/:guid @controllers.HealthDataController.getHealthDataRecord(identifier: String, guid: String)
POST   /api/v1/healthdata/:identifier/record/:guid @controllers.HealthDataController.updateHealthDataRecord(identifier: String, guid: String)
DELETE /api/v1/healthdata/:identifier/record/:guid @controllers.HealthDataController.deleteHealthDataRecord(identifier: String, guid: String)

# API - Health Data
GET    /api/v1/healthdata/:identifier     @controllers.HealthDataController.getHealthData(identifier: String, startDate: java.lang.String ?= null, endDate: java.lang.String ?= null)
POST   /api/v1/healthdata/:identifier     @controllers.HealthDataController.appendHealthData(identifier: String)

# API - Trackers
GET    /api/v1/trackers                       @controllers.TrackerController.getTrackers
GET    /api/v1/trackers/schema/:identifier    @controllers.TrackerController.getTrackerSchema(identifier: String)

# API - Users
GET    /api/v1/profile      @controllers.UserProfileController.getUserProfile
POST   /api/v1/profile      @controllers.UserProfileController.updateUserProfile

# API - Survey Responses
GET    /api/v1/surveys/response/:guid                      @controllers.SurveyResponseController.getSurveyResponse(guid: String)
POST   /api/v1/surveys/response/:guid                      @controllers.SurveyResponseController.appendSurveyAnswers(guid: String)
DELETE /api/v1/surveys/response/:guid                      @controllers.SurveyResponseController.deleteSurveyResponse(guid: String)
GET    /api/v1/surveys/:surveyGuid/published               @controllers.SurveyController.getSurveyMostRecentlyPublishedVersionForUser(surveyGuid: String)
GET    /api/v1/surveys/:surveyGuid/:createdOn              @controllers.SurveyController.getSurveyForUser(surveyGuid: String, createdOn: String)
POST   /api/v1/surveys/:surveyGuid/:createdOn              @controllers.SurveyResponseController.createSurveyResponse(surveyGuid: String, createdOn: String)
POST   /api/v1/surveys/:surveyGuid/:createdOn/:identifier  @controllers.SurveyResponseController.createSurveyResponseWithIdentifier(surveyGuid: String, createdOn: String, identifier: String)

# API - Schedules
GET    /api/v1/schedules   @controllers.ScheduleController.getSchedules

# API - Consent
POST   /api/v1/consent                       @controllers.ConsentController.give
GET    /api/v1/consent                       @controllers.ConsentController.getConsentSignature
POST   /api/v1/consent/email                 @controllers.ConsentController.emailCopy
POST   /api/v1/consent/dataSharing/suspend   @controllers.ConsentController.suspendDataSharing
POST   /api/v1/consent/dataSharing/resume    @controllers.ConsentController.resumeDataSharing

# API - Upload
POST   /api/v1/upload                  @controllers.UploadController.upload
POST   /api/v1/upload/:id/complete     @controllers.UploadController.uploadComplete(id: String)

# Researchers - Surveys
GET    /researchers/v1/surveys                                 @controllers.SurveyController.getAllSurveysMostRecentVersion
POST   /researchers/v1/surveys                                 @controllers.SurveyController.createSurvey
GET    /researchers/v1/surveys/recent                          @controllers.SurveyController.getAllSurveysMostRecentVersion2
GET    /researchers/v1/surveys/published                       @controllers.SurveyController.getAllSurveysMostRecentlyPublishedVersion
GET    /researchers/v1/surveys/:identifier                     @controllers.SurveyController.getMostRecentPublishedSurveyVersionByIdentifier(identifier: String)
GET    /researchers/v1/surveys/:surveyGuid/versions            @controllers.SurveyController.getSurveyAllVersions(surveyGuid: String)
GET    /researchers/v1/surveys/:surveyGuid/recent              @controllers.SurveyController.getSurveyMostRecentVersion(surveyGuid: String)
GET    /researchers/v1/surveys/:surveyGuid/published           @controllers.SurveyController.getSurveyMostRecentlyPublishedVersion(surveyGuid: String)
POST   /researchers/v1/surveys/:surveyGuid/:createdOn/version  @controllers.SurveyController.versionSurvey(surveyGuid: String, createdOn: String)
POST   /researchers/v1/surveys/:surveyGuid/:createdOn/publish  @controllers.SurveyController.publishSurvey(surveyGuid: String, createdOn: String)
POST   /researchers/v1/surveys/:surveyGuid/:createdOn/close    @controllers.SurveyController.closeSurvey(surveyGuid: String, createdOn: String)
GET    /researchers/v1/surveys/:surveyGuid/:createdOn          @controllers.SurveyController.getSurvey(surveyGuid: String, createdOn: String)
POST   /researchers/v1/surveys/:surveyGuid/:createdOn          @controllers.SurveyController.updateSurvey(surveyGuid: String, createdOn: String)
DELETE /researchers/v1/surveys/:surveyGuid/:createdOn          @controllers.SurveyController.deleteSurvey(surveyGuid: String, createdOn: String)

# Researchers - Schedule Plans
GET    /researchers/v1/scheduleplans           @controllers.SchedulePlanController.getSchedulePlans
POST   /researchers/v1/scheduleplans           @controllers.SchedulePlanController.createSchedulePlan
GET    /researchers/v1/scheduleplans/:guid     @controllers.SchedulePlanController.getSchedulePlan(guid: String)
POST   /researchers/v1/scheduleplans/:guid     @controllers.SchedulePlanController.updateSchedulePlan(guid: String)
DELETE /researchers/v1/scheduleplans/:guid     @controllers.SchedulePlanController.deleteSchedulePlan(guid: String)

# Researchers - Study Consent Documents
GET    /researcher/v1/consents                      @controllers.StudyConsentController.getAllConsents
GET    /researcher/v1/consents/active               @controllers.StudyConsentController.getActiveConsent
GET    /researcher/v1/consents/:timestamp           @controllers.StudyConsentController.getConsent(timestamp: String)
POST   /researcher/v1/consents                      @controllers.StudyConsentController.addConsent
POST   /researcher/v1/consents/active/:timestamp    @controllers.StudyConsentController.setActiveConsent(timestamp: String)

# Researchers - Studies
GET    /researcher/v1/study           @controllers.StudyController.getStudyForResearcher          
POST   /researcher/v1/study           @controllers.StudyController.updateStudyForResearcher

# Researchers - Upload Schemas
GET    /researcher/v1/uploadSchema/:schemaId  @controllers.UploadSchemaController.getUploadSchema(schemaId: String)
POST   /researcher/v1/uploadSchema            @controllers.UploadSchemaController.createOrUpdateUploadSchema

# Admin - Studies
GET    /admin/v1/studies/:identifier  @controllers.StudyController.getStudy(identifier: String)
POST   /admin/v1/studies/:identifier  @controllers.StudyController.updateStudy(identifier: String)
GET    /admin/v1/studies              @controllers.StudyController.getAllStudies
POST   /admin/v1/studies              @controllers.StudyController.createStudy 
DELETE /admin/v1/studies/:identifier  @controllers.StudyController.deleteStudy(identifier: String)

# Admin - Backfill
GET    /admin/v1/backfill/:name          @controllers.BackfillController.backfill(name: String)
POST   /admin/v1/backfill/:name/start    @controllers.BackfillController.start(name: String)

# Admin - User Management
POST      /admin/v1/users           @controllers.UserManagementController.createUser
DELETE    /admin/v1/users           @controllers.UserManagementController.deleteUser(email: java.lang.String ?= null)

# Lunch
GET    /api/v1/lunch/where     @controllers.LunchController.where
